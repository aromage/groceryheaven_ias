{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation template for Grocery Heaven development environment v2018.7.13",
    
    "Resources": {
        "Ec2SshInstance001": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "AvailabilityZone": "us-west-2a",
                "ImageId": "ami-a9d09ed1",
                "KeyName": "key-pair-uw2-dev",
                "InstanceType": "t2.micro",
                "SecurityGroupIds": [ "sg-000efd9543f645a3f" ],
                "SubnetId": "subnet-1e7acb55",
                "Monitoring": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "ec2-uw2a-dev-ssh-001"
                    }
                ]
            }
        },

        "Ec2ApiInstance001": {
            "Type": "AWS::EC2::Instance",
            "Metadata": { 
                "AWS::CloudFormation::Init": {
                    "services": {
                        "sysvint": {
                            "codedeploy-agent": {
                                "enabled": "true",
                                "ensureRunning": "true"
                            }
                        }
                    }
                }
            },
            "Properties": { 
                "AvailabilityZone": "us-west-2a",
                "ImageId": "ami-a9d09ed1",
                "KeyName": "key-pair-uw2-dev",
                "InstanceType": "t2.micro",
                "IamInstanceProfile": "GHInstanceProfile",
                "SecurityGroupIds": [ "sg-090e70eb820c84d76" ],
                "SubnetId": "subnet-0d5aa8a5efe1e9672",
                "Monitoring": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "ec2-uw2a-dev-prd-api"
                    }
                ],
                "UserData": {
                    "Fn::Base64":{
                        "Fn::Join":[
                            "",
                            [
                                "#!/bin/bash -ex\n",
                                "yum install -y aws-cfn-bootstrap\n",
                                "yum install -y ruby\n",
                                "yum install -y aws-cli\n",
                                "# Helper function.\n",
                                "function error_exit\n",
                                "{\n",
                                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '",
                                {
                                    "Ref":"WaitHandle"
                                },
                                "'\n",
                                "  exit 1\n",
                                "}\n",
                                "# Install the AWS CodeDeploy Agent.\n",
                                "cd /home/ec2-user/\n",
                                "aws configure set default.s3.signature_version s3v4 || error_exit 'Failed to set aws cli signature to version 4'\n",
                                "aws s3 cp 's3://aws-codedeploy-us-west-2/latest/codedeploy-agent.noarch.rpm' . --region us-west-2 || error_exit 'Failed to download AWS CodeDeploy Agent.'\n",
                                "yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed to install AWS CodeDeploy Agent.' \n",
                                "/opt/aws/bin/cfn-init -s ",
                                {
                                    "Ref":"AWS::StackId"
                                },
                                " -r Ec2ApiInstance001 --region ",
                                {
                                    "Ref":"AWS::Region"
                                },
                                " || error_exit 'Failed to run cfn-init.'\n",
                                "# All is well, so signal success.\n",
                                "/opt/aws/bin/cfn-signal -e 0 -r \"AWS CodeDeploy Agent setup complete.\" '",
                                {
                                    "Ref":"WaitHandle"
                                },
                                "'\n"
                            ]
                        ]
                    }
                }
            }
        },

        "WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "WaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "Properties": {
                "Count": "1",
                "Handle": {
                    "Ref": "WaitHandle"
                },
                "Timeout": "1800"
            }
        }

    }
}
